name: Spring Boot Integration Tests

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: ${{ secrets.GIT_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.GIT_POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.GIT_POSTGRES_USER }} -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      - name: Create PostgreSQL Database
        run: |
          PGPASSWORD="${{ secrets.GIT_POSTGRES_PASSWORD }}" psql -h localhost -U "${{ secrets.GIT_POSTGRES_USER }}" -d postgres -c "CREATE DATABASE postgres;"
        env:
          PGPASSWORD: ${{ secrets.GIT_POSTGRES_PASSWORD }}

      - name: Create `.env` File
        run: |
          echo "PSQLDB_URL=jdbc:postgresql://localhost:5432/postgres" >> .env
          echo "PSQLDB_USERNAME=${{ secrets.GIT_POSTGRES_USER }}" >> .env
          echo "PSQLDB_PASSWORD=${{ secrets.GIT_POSTGRES_PASSWORD }}" >> .env
          echo "SERVER_PORT=8080" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Load Environment Variables
        run: |
          export $(grep -v '^#' .env | xargs)

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Run Tests
        run: mvn test
        env:
          SPRING_CONFIG_IMPORT: optional:file:.env[.properties]
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
          SPRING_DATASOURCE_USERNAME: ${{ secrets.GIT_POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.GIT_POSTGRES_PASSWORD }}
          SERVER_PORT: 8080
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

